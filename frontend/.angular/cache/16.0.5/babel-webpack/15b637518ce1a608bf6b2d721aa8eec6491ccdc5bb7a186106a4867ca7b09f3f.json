{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nclass LoginComponent {\n  constructor(fb,\n  // private authService: AuthService,\n  router) {\n    this.fb = fb;\n    this.router = router;\n    this.form = this.fb.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  login() {\n    const val = this.form.value;\n    if (val.email && val.password) {\n      // this.authService.login(val.email, val.password).subscribe(() => {\n      //   console.log('User is logged in');\n      //   this.router.navigateByUrl('/');\n      // });\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"login\"]],\n  decls: 15,\n  vars: 1,\n  consts: [[3, \"formGroup\"], [1, \"form-field\"], [\"name\", \"email\", \"formControlName\", \"email\"], [\"name\", \"password\", \"formControlName\", \"password\", \"type\", \"password\"], [1, \"form-buttons\"], [1, \"button\", \"button-primary\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"fieldset\")(2, \"legend\");\n      i0.ɵɵtext(3, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"label\");\n      i0.ɵɵtext(6, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\");\n      i0.ɵɵtext(10, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_13_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵtext(14, \"Login\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n    }\n  },\n  encapsulation: 2\n});\nexport { LoginComponent };","map":{"version":3,"names":["Validators","LoginComponent","constructor","fb","router","form","group","email","required","password","login","val","value","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","LoginComponent_Template_button_click_13_listener","ɵɵproperty"],"sources":["C:\\Users\\ignacio.lima\\Desktop\\facultad\\Desarrollo web\\git\\jwt-tutorial\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'login',\n  template: ` <form [formGroup]=\"form\">\n    <fieldset>\n      <legend>Login</legend>\n      <div class=\"form-field\">\n        <label>Email:</label>\n        <input name=\"email\" formControlName=\"email\" />\n      </div>\n      <div class=\"form-field\">\n        <label>Password:</label>\n        <input name=\"password\" formControlName=\"password\" type=\"password\" />\n      </div>\n    </fieldset>\n    <div class=\"form-buttons\">\n      <button class=\"button button-primary\" (click)=\"login()\">Login</button>\n    </div>\n  </form>`,\n})\nexport class LoginComponent {\n  form: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    // private authService: AuthService,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  login() {\n    const val = this.form.value;\n\n    if (val.email && val.password) {\n      // this.authService.login(val.email, val.password).subscribe(() => {\n      //   console.log('User is logged in');\n      //   this.router.navigateByUrl('/');\n      // });\n    }\n  }\n}\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAGnE,MAmBaC,cAAc;EAGzBC,YACUC,EAAe;EACvB;EACQC,MAAc;IAFd,KAAAD,EAAE,GAAFA,EAAE;IAEF,KAAAC,MAAM,GAANA,MAAM;IAEd,IAAI,CAACC,IAAI,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MACxBC,KAAK,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ;KACnC,CAAC;EACJ;EAEAE,KAAKA,CAAA;IACH,MAAMC,GAAG,GAAG,IAAI,CAACN,IAAI,CAACO,KAAK;IAE3B,IAAID,GAAG,CAACJ,KAAK,IAAII,GAAG,CAACF,QAAQ,EAAE;MAC7B;MACA;MACA;MACA;IAAA;EAEJ;;AAvBWR,cAAc,C;mBAAdA,cAAc,EAAAY,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAdjB,cAAc,C;QAAdA,cAAc;EAAAkB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAjBbZ,EAAA,CAAAc,cAAA,cAAyB;MAEzBd,EAAA,CAAAe,MAAA,YAAK;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACtBhB,EAAA,CAAAc,cAAA,aAAwB;MACfd,EAAA,CAAAe,MAAA,aAAM;MAAAf,EAAA,CAAAgB,YAAA,EAAQ;MACrBhB,EAAA,CAAAiB,SAAA,eAA8C;MAChDjB,EAAA,CAAAgB,YAAA,EAAM;MACNhB,EAAA,CAAAc,cAAA,aAAwB;MACfd,EAAA,CAAAe,MAAA,iBAAS;MAAAf,EAAA,CAAAgB,YAAA,EAAQ;MACxBhB,EAAA,CAAAiB,SAAA,gBAAoE;MACtEjB,EAAA,CAAAgB,YAAA,EAAM;MAERhB,EAAA,CAAAc,cAAA,cAA0B;MACcd,EAAA,CAAAkB,UAAA,mBAAAC,iDAAA;QAAA,OAASN,GAAA,CAAAhB,KAAA,EAAO;MAAA,EAAC;MAACG,EAAA,CAAAe,MAAA,aAAK;MAAAf,EAAA,CAAAgB,YAAA,EAAS;;;MAbxDhB,EAAA,CAAAoB,UAAA,cAAAP,GAAA,CAAArB,IAAA,CAAkB;;;;;SAiBzBJ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}